{"ast":null,"code":"var _jsxFileName = \"/Users/yi/Desktop/React/nutritiontable-main/nutrition-table/src/Context/AppContext.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, useState, useEffect } from 'react';\nimport { LOAD_ITEMS } from '../components/GraphQL/Queries';\nimport { useQuery } from \"@apollo/client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AppContext = /*#__PURE__*/React.createContext();\nexport const useAppContext = () => {\n  _s();\n\n  return useContext(AppContext);\n};\n\n_s(useAppContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport const AppContextProvider = props => {\n  _s2();\n\n  const {\n    error,\n    loading,\n    data\n  } = useQuery(LOAD_ITEMS);\n  const [dataTable, setDataTable] = useState([]);\n  useEffect(() => {\n    if (data) setDataTable(data.getAllItems);\n  }, [data]);\n  const context = {\n    dataTable,\n    setDataTable: () => {}\n  };\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: context,\n    ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 12\n  }, this);\n};\n\n_s2(AppContextProvider, \"EpS+hfwUBzTHJ3RO/u2/SHJ4724=\", false, function () {\n  return [useQuery];\n});\n\n_c = AppContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"AppContextProvider\");","map":{"version":3,"sources":["/Users/yi/Desktop/React/nutritiontable-main/nutrition-table/src/Context/AppContext.tsx"],"names":["React","useContext","useState","useEffect","LOAD_ITEMS","useQuery","AppContext","createContext","useAppContext","AppContextProvider","props","error","loading","data","dataTable","setDataTable","getAllItems","context"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAeC,UAAf,EAA2BC,QAA3B,EAAqCC,SAArC,QAAqD,OAArD;AACA,SAAQC,UAAR,QAAyB,+BAAzB;AACA,SAASC,QAAT,QAA8B,gBAA9B;;AAEA,OAAO,MAAMC,UAAU,gBAAGN,KAAK,CAACO,aAAN,EAAnB;AACP,OAAO,MAAMC,aAAa,GAAE;AAAA;;AAAA,SAAKP,UAAU,CAACK,UAAD,CAAf;AAAA,CAArB;;GAAME,a;;AAEb,OAAO,MAAMC,kBAAkB,GAAIC,KAAD,IAAc;AAAA;;AAC5C,QAAM;AAACC,IAAAA,KAAD;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA;AAAjB,MAAyBR,QAAQ,CAACD,UAAD,CAAvC;AACA,QAAM,CAACU,SAAD,EAAYC,YAAZ,IAA4Bb,QAAQ,CAAC,EAAD,CAA1C;AAEAC,EAAAA,SAAS,CAAC,MAAI;AACV,QAAGU,IAAH,EACIE,YAAY,CAACF,IAAI,CAACG,WAAN,CAAZ;AACP,GAHQ,EAGP,CAACH,IAAD,CAHO,CAAT;AAKA,QAAMI,OAAO,GAAG;AACZH,IAAAA,SADY;AAEZC,IAAAA,YAAY,EAAE,MAAI,CAAE;AAFR,GAAhB;AAIA,sBAAO,QAAC,UAAD,CAAY,QAAZ;AAAqB,IAAA,KAAK,EAAEE,OAA5B;AAAA,OAAyCP;AAAzC;AAAA;AAAA;AAAA;AAAA,UAAP;AACH,CAdM;;IAAMD,kB;UACsBJ,Q;;;KADtBI,kB","sourcesContent":["import React, {useContext, useState, useEffect} from 'react'\nimport {LOAD_ITEMS} from '../components/GraphQL/Queries'\nimport { useQuery, gql } from \"@apollo/client\";\n\nexport const AppContext = React.createContext()\nexport const useAppContext =()=> useContext(AppContext);\n\nexport const AppContextProvider = (props:any) =>{\n    const {error, loading, data} = useQuery(LOAD_ITEMS);\n    const [dataTable, setDataTable] = useState([]);\n    \n    useEffect(()=>{\n        if(data)\n            setDataTable(data.getAllItems);\n    },[data])\n\n    const context = {\n        dataTable,\n        setDataTable: ()=>{}\n    }\n    return <AppContext.Provider value={context} {...props}/>;\n}\n\n"]},"metadata":{},"sourceType":"module"}