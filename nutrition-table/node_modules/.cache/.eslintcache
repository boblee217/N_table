[{"/Users/yi/Desktop/React/nutritiontable-main/nutrition-table/src/index.tsx":"1","/Users/yi/Desktop/React/nutritiontable-main/nutrition-table/src/App.tsx":"2","/Users/yi/Desktop/React/nutritiontable-main/nutrition-table/src/Context/AppContext.tsx":"3","/Users/yi/Desktop/React/nutritiontable-main/nutrition-table/src/pages/MainView/MainView.tsx":"4","/Users/yi/Desktop/React/nutritiontable-main/nutrition-table/src/components/navItems/footer.tsx":"5","/Users/yi/Desktop/React/nutritiontable-main/nutrition-table/src/components/GraphQL/Queries.tsx":"6","/Users/yi/Desktop/React/nutritiontable-main/nutrition-table/src/components/TableItems/NutritionTable.tsx":"7","/Users/yi/Desktop/React/nutritiontable-main/nutrition-table/src/components/StyledComponents/Button.tsx":"8","/Users/yi/Desktop/React/nutritiontable-main/nutrition-table/src/components/TableItems/NutritionCell.tsx":"9","/Users/yi/Desktop/React/nutritiontable-main/nutrition-table/src/components/modals/ModalBox.tsx":"10","/Users/yi/Desktop/React/nutritiontable-main/nutrition-table/src/components/modals/AddItemModal/AddItemModal.tsx":"11"},{"size":431,"mtime":1614644759000,"results":"12","hashOfConfig":"13"},{"size":797,"mtime":1616288841240,"results":"14","hashOfConfig":"13"},{"size":674,"mtime":1614644759000,"results":"15","hashOfConfig":"13"},{"size":1899,"mtime":1614644759000,"results":"16","hashOfConfig":"13"},{"size":212,"mtime":1614644759000,"results":"17","hashOfConfig":"13"},{"size":197,"mtime":1614644759000,"results":"18","hashOfConfig":"13"},{"size":3389,"mtime":1614644759000,"results":"19","hashOfConfig":"13"},{"size":412,"mtime":1614644759000,"results":"20","hashOfConfig":"13"},{"size":759,"mtime":1614644759000,"results":"21","hashOfConfig":"13"},{"size":625,"mtime":1614644759000,"results":"22","hashOfConfig":"13"},{"size":2263,"mtime":1614644759000,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1dd9rso",{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"26"},"/Users/yi/Desktop/React/nutritiontable-main/nutrition-table/src/index.tsx",[],["52","53"],"/Users/yi/Desktop/React/nutritiontable-main/nutrition-table/src/App.tsx",["54"],"import React from 'react';\nimport { MainView } from './pages/MainView/MainView';\nimport { Footer } from './components/navItems/footer'\nimport { AppContextProvider } from './Context/AppContext';\nimport { ApolloClient, InMemoryCache, ApolloProvider, HttpLink, from } from \"@apollo/client\"\nimport { onError, ErrorResponse } from \"@apollo/client/link/error\";\n\nconst errorLink = onError((error) => {\n\tif (error)\n\t\tconsole.error(error)\n});\n\nconst link = from([\n\terrorLink,\n\tnew HttpLink({ uri: \"http://localhost:6969/graphql\" }),\n]);\n\nconst client = new ApolloClient({\n\tcache: new InMemoryCache(), link: link\n})\n\nfunction App() {\n\treturn (\n\t\t<ApolloProvider client={client}>\n\t\t\t<AppContextProvider>\n\t\t\t\t<MainView />\n\t\t\t\t<Footer />\n\t\t\t</AppContextProvider>\n\t\t</ApolloProvider>\n\t);\n}\n\nexport default App;\n","/Users/yi/Desktop/React/nutritiontable-main/nutrition-table/src/Context/AppContext.tsx",["55","56","57"],"import React, {useContext, useState, useEffect} from 'react'\nimport {LOAD_ITEMS} from '../components/GraphQL/Queries'\nimport { useQuery, gql } from \"@apollo/client\";\n\nexport const AppContext = React.createContext()\nexport const useAppContext =()=> useContext(AppContext);\n\nexport const AppContextProvider = (props:any) =>{\n    const {error, loading, data} = useQuery(LOAD_ITEMS);\n    const [dataTable, setDataTable] = useState([]);\n    \n    useEffect(()=>{\n        if(data)\n            setDataTable(data.getAllItems);\n    },[data])\n\n    const context = {\n        dataTable,\n        setDataTable: ()=>{}\n    }\n    return <AppContext.Provider value={context} {...props}/>;\n}\n\n","/Users/yi/Desktop/React/nutritiontable-main/nutrition-table/src/pages/MainView/MainView.tsx",[],"/Users/yi/Desktop/React/nutritiontable-main/nutrition-table/src/components/navItems/footer.tsx",[],"/Users/yi/Desktop/React/nutritiontable-main/nutrition-table/src/components/GraphQL/Queries.tsx",[],"/Users/yi/Desktop/React/nutritiontable-main/nutrition-table/src/components/TableItems/NutritionTable.tsx",["58","59"],"import React, {useContext, useState, useEffect} from 'react';\nimport {NutritionCell} from '../../components/TableItems/NutritionCell'\nimport {ModalBox} from '../../components/modals/ModalBox'\nimport {Button} from '../../components/StyledComponents/Button'\n\nexport const NutritionTable = ({data, deleteItem, addItem, sortData})=> {\n    const [selected, setSelected] = useState<string[]>([]);\n    const [showModal, setShowModal] = useState(false);\n\n    const onClose=()=>{\n        setShowModal(false);\n    }\n\n    const onConfirm=(name,cal, fat, carb, pro)=>{\n        const nid = (data.map((i)=>parseInt(i.id)));\n        const newItem = {id: (Math.max(...nid)+1).toString(),dessert: name, nutritionInfo: {calories: cal, fat, carb, protein: pro}}\n        addItem(newItem)\n        setShowModal(false);\n    }\n\n    const selectAll = () =>{\n        if(selected.length===0)\n            setSelected(data.map(item=>item.id))\n        else\n            setSelected([])\n    }\n\n    const setSelections =(e)=>{\n        if(selected.includes(e.target.value)){\n            setSelected(selected.filter(item=>item!==e.target.value))\n        }else{\n            setSelected(Array.from(new Set([...selected,e.target.value])))\n        }\n    }\n\n    useEffect(()=>{\n            setSelected([]);\n    },[data])\n\n  return (\n  <>\n    <div data-testid=\"page-tools\" className=\"page-tools\">\n        <div className=\"page-selected\">{selected.length} Selected</div>\n        <div className=\"page-controls\">\n            <Button onClick={()=> setShowModal(true)} buttonStyle=\"Bordlerless\" className=\"btn btn-add\" type=\"button\" id=\"pre-page-add\" data-testid=\"pre-page-add\">\n                <i className=\"icon-pencil\" /> Add New\n            </Button>\n\n            <Button disabled={selected.length<=0} onClick={()=>deleteItem(selected)} buttonStyle=\"Bordlerless\" className={`btn btn-delete  ${selected.length<=0?\"disabled\":\"\"}`} type=\"button\" id=\"pre-page-delete\" data-testid=\"pre-page-delete\">\n                <i className=\"icon-remove\" /> Delete\n            </Button>\n        </div>\n    </div>\n\n    <div className=\"block-section\">\n\n     {data && data.length > 0 &&\n        <table className=\"table table-hover\" data-testid=\"data-table\">\n            <thead sorting>\n                <tr>\n                    <th className=\"span1 text-center sorting_asc\">\n                        <input data-testid=\"check_selectAll\" checked={selected.length===data.length} type=\"checkbox\" onClick={()=> selectAll()} />\n                    </th>\n                    <th className=\"span1 text-center sorting\"><a href=\"#\" className=\"sortText\" onClick={()=>sortData()}>Dessert (100g serving)</a></th>\n                    <th>Calories (g)</th>\n                    <th className=\"hidden-phone\">\n                        Fat (g)\n                    </th>\n                    <th className=\"hidden-phone\">Carbs (g)</th>\n                    <th className=\"hidden-phone\">Protein (g)</th>\n                </tr>\n            </thead>\n            <tbody>\n            {data.map((row)=>{\n                return <NutritionCell key={row.id} preSelect={selected.includes(row.id)} id={row.id} setSelected={setSelections} name={row.dessert} nutritionInfo={row.nutritionInfo} />\n            })        \n            }\n            </tbody>\n        </table>\n    }\n    </div>\n    {showModal && <ModalBox show={showModal} onClose={onClose} onConfirm={onConfirm}/>}\n    </>\n  );\n}","/Users/yi/Desktop/React/nutritiontable-main/nutrition-table/src/components/StyledComponents/Button.tsx",[],"/Users/yi/Desktop/React/nutritiontable-main/nutrition-table/src/components/TableItems/NutritionCell.tsx",["60"],"import React, {useEffect} from 'react';\nimport { INutritionCellProps } from \"./Types\";\n\nexport const NutritionCell = ({id,name, nutritionInfo,setSelected,preSelect}:INutritionCellProps)=> {\n\n  return (\n    <tr>\n        <td className=\"span1 text-center\">\n            <input checked={preSelect} type=\"checkbox\" value={id} onChange={(e)=>setSelected(e)} data-testid={`check-${id}`} id={`check-${id}`} name=\"checkbox3-1\" />\n        </td>\n        <td className=\"span1 text-center\">{name}</td>\n        <td>\n            {nutritionInfo.calories}\n        </td>\n        <td className=\"hidden-phone\">{nutritionInfo.fat}</td>\n        <td className=\"hidden-phone\">{nutritionInfo.carb}</td>\n        <td className=\"hidden-phone\">{nutritionInfo.protein}</td>\n    </tr>\n  );\n}","/Users/yi/Desktop/React/nutritiontable-main/nutrition-table/src/components/modals/ModalBox.tsx",[],"/Users/yi/Desktop/React/nutritiontable-main/nutrition-table/src/components/modals/AddItemModal/AddItemModal.tsx",["61"],"import React, {useContext, useState} from 'react';\nimport {Button} from '../../StyledComponents/Button'\nimport './AddItemModal.css';\n\nexport const AddItemModal = ({onConfirm})=> {\nconst [name, setName] = useState(\"\");\nconst [cal, setCal] = useState(\"\");\nconst [fat, setFat] = useState(\"\");\nconst [carb, setCarb] = useState(\"\");\nconst [pro, setPro] = useState(\"\");\n\nconst saveInput=(e)=>{\n    if(e.target.name===\"name\")\n        setName(e.target.value);\n    if(e.target.name===\"cal\")\n        setCal(e.target.value);\n    if(e.target.name===\"fat\")\n        setFat(e.target.value);\n    if(e.target.name===\"carb\")\n        setCarb(e.target.value);\n    if(e.target.name===\"pro\")\n        setPro(e.target.value);\n}\n\n  return (\n      <>\n            <div className=\"modal-error\">Please fill all details before you submit</div>\n            <div data-testid=\"modal-input\" className=\"modal-input\">\n                Dessert Name*<input type=\"text\" data-testid=\"name\" id=\"name\" name=\"name\" onChange={(e)=>saveInput(e)} />\n            </div>\n            <div className=\"modal-input\">\n                Calories*<input type=\"number\" data-testid=\"cal\" id=\"cal\" name=\"cal\" onChange={(e)=>saveInput(e)} />\n            </div>\n            <div className=\"modal-input\">\n                Fat*<input type=\"number\" data-testid=\"fat\" id=\"fat\" name=\"fat\"  onChange={(e)=>saveInput(e)} />\n            </div>\n            <div className=\"modal-input\">\n                Carbs*<input type=\"number\" data-testid=\"carb\" id=\"carb\" name=\"carb\" onChange={(e)=>saveInput(e)} />\n            </div>\n            <div className=\"modal-input\">\n                Protein*<input type=\"number\" data-testid=\"pro\" id=\"pro\" name=\"pro\" onChange={(e)=>saveInput(e)} />\n            </div>\n            <Button disabled={name===\"\" || cal===\"\" || fat===\"\" || carb===\"\" || pro ===\"\"}\n                buttonStyle=\"Bordlerless\" \n                className={`btn btn-submit ${(name===\"\" || cal===\"\" || fat===\"\" || carb===\"\" || pro ===\"\") ?\"disabled\":\"\"}`} \n                type=\"button\"\n                onClick={()=>onConfirm(name,cal, fat, carb, pro)}\n                id=\"pre-page-submit\" \n                data-testid=\"pre-page-submit\">\n                <i className=\"icon-check\" /> Submit\n            </Button>\n            </>\n\n  );\n}",{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","severity":1,"message":"67","line":6,"column":19,"nodeType":"68","messageId":"69","endLine":6,"endColumn":32},{"ruleId":"66","severity":1,"message":"70","line":3,"column":20,"nodeType":"68","messageId":"69","endLine":3,"endColumn":23},{"ruleId":"66","severity":1,"message":"71","line":9,"column":12,"nodeType":"68","messageId":"69","endLine":9,"endColumn":17},{"ruleId":"66","severity":1,"message":"72","line":9,"column":19,"nodeType":"68","messageId":"69","endLine":9,"endColumn":26},{"ruleId":"66","severity":1,"message":"73","line":1,"column":16,"nodeType":"68","messageId":"69","endLine":1,"endColumn":26},{"ruleId":"74","severity":1,"message":"75","line":64,"column":63,"nodeType":"76","endLine":64,"endColumn":121},{"ruleId":"66","severity":1,"message":"77","line":1,"column":16,"nodeType":"68","messageId":"69","endLine":1,"endColumn":25},{"ruleId":"66","severity":1,"message":"73","line":1,"column":16,"nodeType":"68","messageId":"69","endLine":1,"endColumn":26},"no-native-reassign",["78"],"no-negated-in-lhs",["79"],"@typescript-eslint/no-unused-vars","'ErrorResponse' is defined but never used.","Identifier","unusedVar","'gql' is defined but never used.","'error' is assigned a value but never used.","'loading' is assigned a value but never used.","'useContext' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation"]